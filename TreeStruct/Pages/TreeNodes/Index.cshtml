@page
@using TreeStruct.Models
@using System.Text
@using Newtonsoft.Json
@using TreeStruct.Pages_TreeNodes
@model TreeStruct.Pages_TreeNodes.IndexModel

@{
    ViewData["Title"] = "Tree structure";
}

<h1>View the structure</h1>

<p>
    <a asp-page="Create">Create new node</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                <form method="post">
                    <input type="hidden" name="fold" value="foldAll" />
                    <input type="submit" value="Collapse All" />
                </form>
                <form method="post">
                   <input type="hidden" name="fold" value="expandAll" />
                   <input type="submit" value="Expand All" />
               </form>
            </th>
            <th>
                <form method="post">
                    <select asp-for="SortOrder" asp-items="Html.GetEnumSelectList<IndexModel.SortOrders>()">
                    </select>
                    <input type="submit" value="Apply sorting" />
                </form>
            </th>

        </tr>
    </thead>
    @{
        @foreach (var rootNode in await GetSortedList(Model.TreeNode.Where(p => p.TreeNodeID == null)))
        {
                await ShowTree(rootNode);
        };
    }
</table>


@functions{

    bool IsExtended(TreeNode node)
    {
        var foldState = HttpContext.Session.Get("Expand") ?? new byte[0];
        var foldDict = new Dictionary<int, bool>();
        if (foldState.Length != 0)
        {
            foldDict = JsonConvert.DeserializeObject<Dictionary<int, bool>>(Encoding.ASCII.GetString(foldState)) ?? new Dictionary<int, bool>();
        }
        
        

        bool nodeState = false;

        if (foldDict.TryGetValue(-1, out nodeState))
        {
            if (nodeState == true)
            {
                return true;
            }
        }
        
        foldDict.TryGetValue(node.ID, out nodeState);

        return nodeState;
    }

    async Task RenderCollapseButton(TreeNode node)
    {
        if (node.children.Any())
        {
            <a asp-page="./Index" asp-route-id="@node.ID" asp-page-handler="fold">@(IsExtended(node) ? "Collapse" : "Expand")</a>
            @(" | ")
        }
    }

    async Task<IOrderedEnumerable<TreeNode>> GetSortedList(IEnumerable<TreeNode> nodes)
    {
        var sortOrder = (IndexModel.SortOrders)(HttpContext.Session.GetInt32("SortOrder") ?? (int)IndexModel.SortOrders.AlphAsc);
        var sortedList = (IndexModel.SortOrders) sortOrder switch
        {
            IndexModel.SortOrders.AlphAsc => nodes.OrderBy(p => p.value),
            IndexModel.SortOrders.AlphDesc => nodes.OrderByDescending(p => p.value),
            IndexModel.SortOrders.ChildAsc => nodes.OrderBy(p => p.children.Count()),
            IndexModel.SortOrders.ChildDesc => nodes.OrderByDescending(p => p.children.Count()),
            IndexModel.SortOrders.IdAsc => nodes.OrderBy(p => p.ID),
            IndexModel.SortOrders.IdDesc => nodes.OrderByDescending(p => p.ID),
            IndexModel.SortOrders.LenAsc => nodes.OrderBy(p => p.value.Length),
            IndexModel.SortOrders.LenDesc => nodes.OrderByDescending(p => p.value.Length),
            _ => nodes.OrderBy(p => p.ID)
            };

        return sortedList;
    } 
    
    async Task ShowTree(TreeNode node){
        <tbody>
        <tr>
            <td>
                @node.value 
                (
                @node.children.Count()
                )
            </td>
            <td style="text-align: end">
                @{await RenderCollapseButton(node);}
                <a asp-page="./Edit" asp-route-id="@node.ID">Edit node</a> |
                <a asp-page="./Add" asp-route-id="@node.ID">Add child node</a> |
                <a asp-page="./Delete" asp-route-id="@node.ID">Delete node</a>
            </td>
        </tr>
        @if (node.children.Any() && IsExtended(node))
        {
            <tr>
                <td colspan="2" style="padding-left: 2em; padding-right: 2em">
                    <table class="table">
                        <tbody>
                        @{
                            var sortedList = await GetSortedList(node.children);
                            
                        }
                        @foreach (var child in sortedList)
                        {
                            await ShowTree(child);
                        }
                        </tbody>
                    </table>
                </td>
            </tr>
        }
        </tbody>
    }
}